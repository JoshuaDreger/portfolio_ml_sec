#!/usr/bin/env bash
#
# scan.sh: simple wrapper to run Nmap against a target,
#          save grepable + XML output, and convert XML → HTML.
#
# Usage: ./scan.sh <target> [<output_folder>]
#
#   <target>        : IP address or domain to scan (e.g., 192.168.1.10)
#   <output_folder> : (optional) directory to place results (default: ./results)
#

set -eo pipefail

# ── helper: detect if the script is being sourced ─────────────────────────────
(return 0 2>/dev/null) && SOURCED=1 || SOURCED=0

warn() { printf '\033[0;31m[!] %s\033[0m\n' "$*"; }

# ── 1. Get the TARGET ─────────────────────────────────────────────────────────
if [[ $# -lt 1 ]]; then
  warn "No target supplied."
  read -rp "Enter an IP/hostname to scan (or press Enter to cancel): " TARGET
  if [[ -z $TARGET ]]; then
    warn "Nothing to do. Bye!"
    # If the script was sourced, 'return'; otherwise normal 'exit'.
    (( SOURCED )) && return 0 || exit 0
  fi
else
  TARGET="$1"
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OUTPUT_DIR="$SCRIPT_DIR/my_scan_results"
mkdir -p "$OUTPUT_DIR"
BASENAME="scan_at_$(date +%Y%m%d_%H%M%S)_on_${TARGET//[^[:alnum:]_.-]/_}"

echo "[*] Running Nmap against $TARGET..."
if ! nmap -Pn -sC -sV \
          -oG "$OUTPUT_DIR/${BASENAME}.grep" \
          -oX "$OUTPUT_DIR/${BASENAME}.xml" \
          "$TARGET"; then
  echo "[!] Nmap returned a non-zero exit code. Check target or permissions."
  exit 1
fi

echo "[*] Nmap scan complete."

# ---- find nmap.xsl ---------------------------------------------------------
XSLT="/usr/share/nmap/nmap.xsl"
if [[ ! -f $XSLT ]]; then
  XSLT=$( (command -v locate >/dev/null 2>&1 && locate -l1 nmap.xsl) || true )
  [[ -z $XSLT ]] && XSLT=$(find /usr /opt -name nmap.xsl 2>/dev/null | head -n1)
fi
[[ -z ${XSLT:-} || ! -f $XSLT ]] && {
  echo "[!] nmap.xsl not found. Install the nmap package that ships it, or set XSLT path."
  exit 1
}

# ---- convert XML → HTML ----------------------------------------------------
if command -v xsltproc >/dev/null 2>&1; then
  HTML_OUT="$OUTPUT_DIR/${BASENAME}.html"
  if ! xsltproc -o "$HTML_OUT" "$XSLT" "$OUTPUT_DIR/${BASENAME}.xml"; then
    echo "[!] xsltproc failed to generate HTML, but XML output is still available."
  else
    echo "[*] HTML report: $HTML_OUT"
  fi
else
  echo "[!] xsltproc not installed; skipping HTML generation."
fi

echo "[✓] Results saved in $OUTPUT_DIR"
